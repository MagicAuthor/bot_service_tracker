import aiosqlite
import subprocess
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from functions import get_service_info, get_service_status, is_service_exist
from FSM import AddServiceStates
from handlers.admin_kb import create_service_keyboard

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª—É–∂–±—ã
@router.callback_query(F.data.startswith("service_"))
async def handle_service_action(callback_query: CallbackQuery):
    await callback_query.answer()
    service_name = callback_query.data.split("service_")[1]
    service_info = get_service_info(service_name)
    status = get_service_status(service_name)
    status_icon = "‚úÖ" if status == "active" else "‚ùå"
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª—É–∂–±–µ
    text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª—É–∂–±—É {service_name}{status_icon}.\n"
            f"–°—Ç–∞—Ç—É—Å: {service_info['is_active']}\n"
            f"PID: {service_info['pid']}\n"
            f"–ü–∞–º—è—Ç—å: {service_info['memory']} –ú\n"
            f"CPU: {service_info['cpu']}s\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëá")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_{service_name}")],
            [InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å" if status == "inactive" else "–í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"toggle_{service_name}")],
            [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{service_name}")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{service_name}")]
        ]
    )
    await callback_query.message.answer(f"{text}", reply_markup=keyboard)

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã
@router.callback_query(F.data.startswith("restart_"))
async def restart_service(callback_query: CallbackQuery, bot: Bot) -> None:
    await callback_query.answer()
    service_name = callback_query.data.split("restart_")[1]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª—É–∂–±–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã
    if is_service_exist(service_name):
        subprocess.run(["sudo", "systemctl", "restart", service_name], check=True)
        await callback_query.message.answer(f"–°–ª—É–∂–±–∞ {service_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect("database.db") as db:
            await db.execute("UPDATE services SET status = ? WHERE name = ?", ("active", service_name))
            await db.commit()
    else:
        await callback_query.message.answer(f"–°–ª—É–∂–±–∞ {service_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
    keyboard, _ = await create_service_keyboard()
    await bot.send_message(chat_id=callback_query.from_user.id, text="C–ø–∏—Å–æ–∫ —Å–ª—É–∂–±:", reply_markup=keyboard)

# –í–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–ª—É–∂–±—ã
@router.callback_query(F.data.startswith("toggle_"))
async def toggle_service(callback_query: CallbackQuery, bot: Bot):
    await callback_query.answer()
    service_name = callback_query.data.split("toggle_")[1]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª—É–∂–±–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã
    if is_service_exist(service_name):
        status = get_service_status(service_name)
        if status == "active":
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É–∂–±—É
            subprocess.run(["sudo", "systemctl", "stop", service_name], check=True)
            new_status = "inactive"
            await callback_query.message.answer(f"–°–ª—É–∂–±–∞ {service_name} –≤—ã–∫–ª—é—á–µ–Ω–∞")
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—É
            subprocess.run(["sudo", "systemctl", "start", service_name], check=True)
            new_status = "active"
            await callback_query.message.answer(f"–°–ª—É–∂–±–∞ {service_name} –≤–∫–ª—é—á–µ–Ω–∞")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect("database.db") as db:
            await db.execute("UPDATE services SET status = ? WHERE name = ?", (new_status, service_name))
            await db.commit()
    else:
        await callback_query.message.answer(f"–°–ª—É–∂–±–∞ {service_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
    keyboard, _ = await create_service_keyboard()
    await bot.send_message(chat_id=callback_query.from_user.id, text="C–ø–∏—Å–æ–∫ —Å–ª—É–∂–±:", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª—É–∂–±—ã
@router.callback_query(F.data.startswith("edit_"))
async def edit_service(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    service_name = callback_query.data.split("edit_")[1]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å–ª—É–∂–±—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(service_name=service_name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"service_{service_name}")]])
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª—É–∂–±—ã {service_name}:", reply_markup=keyboard)
    await state.set_state(AddServiceStates.waiting_for_new_service_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª—É–∂–±—ã
@router.message(AddServiceStates.waiting_for_new_service_name)
async def edit_service(message: Message, state: FSMContext):
    data = await state.get_data()
    old_service_name = data.get("service_name")
    new_service_name = message.text
    # –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª—É–∂–±—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("database.db") as db:
        async with db.execute("UPDATE services SET name = ? WHERE name = ?", (new_service_name, old_service_name)) as cursor:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            if cursor.rowcount == 0:
                await message.answer(f"–°–ª—É–∂–±–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {old_service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                await message.answer(f"–°–ª—É–∂–±–∞ {old_service_name} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ {new_service_name}")
            await db.commit()
    await state.update_data(service_name=None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    keyboard, _ = await create_service_keyboard()
    await message.answer("C–ø–∏—Å–æ–∫ —Å–ª—É–∂–±:", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª—É–∂–±—ã
@router.callback_query(F.data.startswith("delete_"))
async def delete_service(callback_query: CallbackQuery, bot: Bot):
    await callback_query.answer()
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ª—É–∂–±—ã –∏–∑ callback_data
    service_name = callback_query.data.split("delete_")[1]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª—É–∂–±–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã
    if is_service_exist(service_name):
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É–∂–±—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            subprocess.run(["sudo", "systemctl", "stop", service_name], check=True)
        except subprocess.CalledProcessError as e:
            await callback_query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É–∂–±—É {service_name}: {e}")
            return
    # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–±—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("database.db") as db:
        async with db.execute("DELETE FROM services WHERE name = ?", (service_name,)) as cursor:
            await db.commit()
            if cursor.rowcount > 0:
                await bot.send_message(callback_query.from_user.id, f"–°–ª—É–∂–±–∞ {service_name} —É–¥–∞–ª–µ–Ω–∞")
            else:
                await bot.send_message(callback_query.from_user.id, f"–°–ª—É–∂–±–∞ {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    keyboard, _ = await create_service_keyboard()
    await bot.send_message(chat_id=callback_query.from_user.id, text="C–ø–∏—Å–æ–∫ —Å–ª—É–∂–±:", reply_markup=keyboard)